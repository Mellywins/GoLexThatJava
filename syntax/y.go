// Code generated by goyacc -v parsetable syntax.y. DO NOT EDIT.

//line syntax.y:10
    package syntax
import __yyfmt__ "fmt"
//line syntax.y:10
		    import (
        "fmt"
        "log"

    )

//line syntax.y:17
type yySymType struct{
	yys int
    token *lexmachine.Token
    ast   *Node
}

const SPACE = 57346
const TAB = 57347
const BANG = 57348
const INTEGER_LITERAL = 57349
const BOOLEAN_LITERAL = 57350
const IDENTIFIER = 57351
const SINGLE_LINE_COMMENT = 57352
const MULTI_LINE_COMMENT = 57353
const BREAK_LINE = 57354
const class = 57355
const public = 57356
const static = 57357
const void = 57358
const main = 57359
const String = 57360
const System.out.println = 57361
const return = 57362
const int = 57363
const if = 57364
const for = 57365
const else = 57366
const while = 57367
const this = 57368
const new = 57369
const boolean = 57370
const length = 57371
const extends = 57372
const LEFTBRACKET = 57373
const RIGHTBRACKET = 57374
const LEFTANGLEBRACKET = 57375
const RIGHTANGLEBRACKET = 57376
const COMMA = 57377
const SEMICOLON = 57378
const COLON = 57379
const LEFTPARENTHESIS = 57380
const RIGHTPARENTHESIS = 57381
const PERIOD = 57382
const PLUS = 57383
const ASTERIX = 57384
const DIVISION = 57385
const MODULO = 57386
const DOUBLEQUAL = 57387
const DIFFERENT = 57388
const LESS = 57389
const LESSOREQUALS = 57390
const GREATER = 57391
const GREATEROREQUALS = 57392
const LOGICALAND = 57393
const LOGICALOR = 57394
const EQUAL = 57395
const MINUS = 57396

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SPACE",
	"TAB",
	"BANG",
	"INTEGER_LITERAL",
	"BOOLEAN_LITERAL",
	"IDENTIFIER",
	"SINGLE_LINE_COMMENT",
	"MULTI_LINE_COMMENT",
	"BREAK_LINE",
	"class",
	"public",
	"static",
	"void",
	"main",
	"String",
	"System.out.println",
	"return",
	"int",
	"if",
	"for",
	"else",
	"while",
	"this",
	"new",
	"boolean",
	"length",
	"extends",
	"LEFTBRACKET",
	"RIGHTBRACKET",
	"LEFTANGLEBRACKET",
	"RIGHTANGLEBRACKET",
	"COMMA",
	"SEMICOLON",
	"COLON",
	"LEFTPARENTHESIS",
	"RIGHTPARENTHESIS",
	"PERIOD",
	"PLUS",
	"ASTERIX",
	"DIVISION",
	"MODULO",
	"DOUBLEQUAL",
	"DIFFERENT",
	"LESS",
	"LESSOREQUALS",
	"GREATER",
	"GREATEROREQUALS",
	"LOGICALAND",
	"LOGICALOR",
	"EQUAL",
	"MINUS",
}

var yyStatenames = [...]string{
}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}


const yyPrivate = 57344

const yyLast = 242

var yyAct = [...]int8{
	63, 48, 21, 84, 110, 61, 36, 115, 122, 16,
	44, 124, 85, 81, 83, 123, 39, 113, 105, 80,
	84, 120, 59, 79, 58, 15, 82, 60, 57, 85,
	81, 83, 27, 34, 30, 109, 80, 28, 43, 95,
	79, 77, 71, 82, 37, 62, 26, 47, 42, 54,
	46, 56, 12, 37, 32, 8, 84, 112, 72, 73,
	74, 75, 76, 38, 29, 85, 81, 83, 45, 104,
	88, 89, 80, 35, 24, 10, 79, 116, 87, 82,
	96, 97, 98, 99, 100, 101, 84, 55, 103, 33,
	86, 53, 107, 108, 106, 85, 81, 83, 111, 14,
	25, 52, 80, 20, 50, 114, 79, 51, 102, 82,
	22, 117, 84, 94, 119, 49, 11, 5, 121, 3,
	41, 85, 81, 83, 118, 125, 40, 31, 80, 84,
	23, 19, 79, 13, 93, 82, 7, 6, 85, 81,
	83, 9, 4, 17, 2, 80, 84, 1, 0, 79,
	18, 0, 82, 0, 92, 85, 81, 83, 0, 0,
	0, 0, 80, 84, 0, 0, 79, 0, 0, 82,
	0, 91, 85, 81, 83, 0, 0, 0, 0, 80,
	84, 0, 0, 79, 0, 0, 82, 0, 90, 85,
	81, 83, 0, 0, 0, 0, 80, 84, 0, 0,
	79, 0, 78, 82, 0, 84, 85, 81, 83, 69,
	64, 65, 66, 80, 85, 81, 83, 79, 0, 0,
	82, 80, 0, 0, 0, 79, 0, 0, 82, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70,
}

var yyPact = [...]int16{
	106, -1000, 104, 128, -1000, 127, 22, 45, 102, 19,
	124, 84, 122, -1000, 87, 96, 121, 43, -1000, -1000,
	83, 12, 122, 1, 32, -4, -1000, 118, 122, -1000,
	71, -5, -1000, 42, 122, 31, -23, 117, 111, 15,
	3, -29, 122, 122, 14, 82, -1000, 82, 67, 82,
	-10, -14, -16, -26, 11, 203, 8, 203, 203, 203,
	203, 203, 7, 166, -1000, -1000, -1000, -1000, 69, 203,
	203, -1000, 149, 132, 115, 98, 81, -1000, 5, 203,
	203, 203, 203, 203, 203, 79, 38, -20, 174, 55,
	82, 82, -1, -1000, -49, 96, 174, 174, 174, 174,
	174, 25, -1000, -21, 203, -32, -1000, 53, -1000, -1000,
	203, -1000, -1000, 203, -11, -1000, 82, -28, -24, 174,
	-1000, -1000, -1000, -1000, 203, 174,
}

var yyPgo = [...]uint8{
	0, 147, 144, 142, 1, 141, 25, 2, 9, 0,
	6, 124,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 3, 5, 5, 6, 6, 4,
	4, 4, 4, 4, 4, 4, 8, 8, 8, 8,
	10, 10, 10, 7, 7, 7, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 11, 11,
}

var yyR2 = [...]int8{
	0, 1, 2, 17, 7, 0, 2, 0, 4, 3,
	7, 5, 5, 4, 7, 0, 3, 1, 1, 1,
	0, 2, 4, 13, 14, 0, 0, 3, 3, 3,
	3, 3, 4, 3, 6, 1, 1, 1, 1, 5,
	4, 2, 3, 1, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, 13, -3, 13, 9, 9, 33, -5,
	30, 14, 33, 9, 15, -6, -8, 21, 28, 9,
	16, -7, 14, 9, 31, 17, 34, -8, 36, 32,
	38, 9, -6, 18, 38, 31, -10, -8, 32, 39,
	9, 9, 33, 35, 39, -6, -10, 33, -4, 33,
	22, 25, 19, 9, -4, 20, -4, 38, 38, 38,
	53, 31, 34, -9, 7, 8, 9, 26, 27, 6,
	38, 34, -9, -9, -9, -9, -9, 34, 36, 51,
	47, 41, 54, 42, 31, 40, 21, 9, -9, -9,
	39, 39, 39, 36, 32, 34, -9, -9, -9, -9,
	-9, -9, 29, 9, 31, 38, 39, -4, -4, 36,
	53, -7, 32, 38, -9, 39, 24, -9, -11, -9,
	32, -4, 36, 39, 35, -9,
}

var yyDef = [...]int8{
	0, -2, 1, 0, 2, 0, 0, 5, 0, 0,
	0, 0, 7, 6, 0, 25, 0, 18, 17, 19,
	0, 0, 0, 0, 0, 0, 4, 0, 7, 16,
	0, 0, 8, 0, 20, 0, 0, 0, 0, 0,
	21, 0, 7, 20, 0, 15, 22, 15, 0, 15,
	0, 0, 0, 0, 0, 26, 0, 26, 26, 26,
	26, 26, 0, 0, 35, 36, 37, 38, 0, 26,
	26, 9, 0, 0, 0, 0, 0, 3, 0, 26,
	26, 26, 26, 26, 26, 0, 0, 0, 41, 0,
	15, 15, 0, 13, 0, 23, 27, 28, 29, 30,
	31, 0, 33, 0, 26, 0, 42, 0, 11, 12,
	26, 24, 32, 26, 0, 40, 15, 0, 0, 43,
	39, 10, 14, 34, 26, 44,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54,
}


var yyTok3 = [...]int8{
	0,
}


var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
